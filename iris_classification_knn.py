# -*- coding: utf-8 -*-
"""Iris Classification KNN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BMO3itH_ZFc4oe82EGPVfOdgSj2jMEkR

## INSTANCE BASED LEARNING

### Membaca data Iris
"""

df = pd.read_csv("../Data/Iris.csv")
df

print("iris keys: {} \n".format(df.keys()))

"""### Data preparation

#### Menghapus kolom data yang tidak digunakan
"""

df.drop(columns="Id", inplace=True)
df

"""#### Mengecek nilai NA"""

df.isna().sum()

"""#### Menangani data kategorikal dengan labelling"""

lab = {label: idx for idx, label in enumerate(np.unique(df['Species']))}
df['Species'] = df['Species'].map(lab)

print(lab)

df

"""### Describe Iris Dataset
Seskripsi data setelah preprocessing sebelum memasuki modelling
"""

print("Iris dataset shape: {}".format(df.shape))

print("iris keys: {} \n".format(df.keys()))

df.dtypes

"""### Klasifikasi dengan K-Nearest Neighbor

#### Split feature dan target
"""

feature = np.array(df.drop(columns="Species"))
target = np.array(df["Species"])

#Plotting dataset

mglearn.discrete_scatter(feature[:, 0], feature[:, 1], target)
plt.legend(["Iris-setosa", "Iris-versicolor", "Iris-verginica"], loc=4)
plt.xlabel("First feature")
plt.ylabel("Second feature")
print("X.shape: {}".format(feature.shape))

"""#### Split training dan testing
Perbandingan 70% training dan 30% testing
"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(feature, target, 
                                                    random_state=0,
                                                    train_size = 0.7)

"""#### KNeighbors Classifer"""

from sklearn.neighbors import KNeighborsClassifier

clf = KNeighborsClassifier(n_neighbors=3)

clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

print("Test set: \n{} \n{} \n".format(X_test, y_test))
print("Test set predictions {}".format(y_pred))

"""#### Evaluasi Akurasi Model"""

print("Test set accuracy:  {:.2f}".format(clf.score(X_test, y_test)))

from sklearn.metrics import confusion_matrix

conf = confusion_matrix(y_test, y_pred)
# Transform to df for easier plotting
conf_iris = pd.DataFrame(conf,
                     index = ['setosa','versicolor','virginica'], 
                     columns = ['setosa','versicolor','virginica'])

sns.heatmap(conf_iris, annot=True)
plt.title('Accuracy using brute:{0:.3f}'.format(clf.score(X_test, y_test)))
plt.ylabel('Actual label')
plt.xlabel('Predicted label')
plt.show()